class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<Character,Integer> map = new HashMap<Character,Integer>();
        int left =0,right=0;
        int len=0;
        int stringLength = s.length();
        while(right<stringLength)
        { 
           char lc = s.charAt(right);
           if(map.containsKey(lc))
              left = Math.max(map.get(lc)+1,left);
            map.put(lc,right);
            len=Math.max(len,(right-left+1));
            right++;
        }
        return len;
    }
}



WITH HASHSET EASY SOLN
code
  
  public int lengthOfLongestSubstring(String s) {
    int i = 0, j = 0, max = 0;
    Set<Character> set = new HashSet<>();
    
    while (j < s.length()) {
        if (!set.contains(s.charAt(j))) {
            set.add(s.charAt(j++));
            max = Math.max(max, set.size());
        } else {
            set.remove(s.charAt(i++));
        }
    }
    
    return max;
}
}

